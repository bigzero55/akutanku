// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rPFPMaHQG1SUnR9RJDKCAh
// Component: VGljfr-IjQgq

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: R3z5KRAspWPt/component
import DateTimeRangePicker from "../../DateTimeRangePicker"; // plasmic-import: _s-_aTbI8-Rx/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: iAriptSG9zeG/component
import Chart from "../../Chart"; // plasmic-import: SbR2z39VvnFP/component
import Card from "../../Card"; // plasmic-import: UmTHwg1G9McV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsthPnRPdlM3Or } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: THPnRPdlM3OR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rPFPMaHQG1SUnR9RJDKCAh/projectcss
import sty from "./PlasmicMonthOverview.module.css"; // plasmic-import: VGljfr-IjQgq/css

import image7BVkWVsp8X5M from "./images/image7.svg"; // plasmic-import: BVkWVsp_8x5m/picture
import orderIconR29DQx4BCnui from "./images/orderIcon.svg"; // plasmic-import: R29dQX4bCNUI/picture
import dollarIconM7GiU92Zwvqu from "./images/dollarIcon.svg"; // plasmic-import: M7GiU92zwvqu/picture
import cartIconKAzmWj4Icoq6 from "./images/cartIcon.svg"; // plasmic-import: kAzmWJ4ICOQ6/picture

createPlasmicElementProxy;

export type PlasmicMonthOverview__VariantMembers = {};
export type PlasmicMonthOverview__VariantsArgs = {};
type VariantPropType = keyof PlasmicMonthOverview__VariantsArgs;
export const PlasmicMonthOverview__VariantProps = new Array<VariantPropType>();

export type PlasmicMonthOverview__ArgsType = {};
type ArgPropType = keyof PlasmicMonthOverview__ArgsType;
export const PlasmicMonthOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicMonthOverview__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  dateTimeRangePicker?: Flex__<typeof DateTimeRangePicker>;
  start?: Flex__<typeof AntdDatePicker>;
  chart?: Flex__<typeof Chart>;
};

export interface DefaultMonthOverviewProps {
  className?: string;
}

const $$ = {};

function PlasmicMonthOverview__RenderFunc(props: {
  variants: PlasmicMonthOverview__VariantsArgs;
  args: PlasmicMonthOverview__ArgsType;
  overrides: PlasmicMonthOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "start.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    totalUsersByMonthCustomRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "33608bf5-df54-4360-b5f5-f8695d256a72",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.33608bf5-df54-4360-b5f5-f8695d256a72.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalOrdersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "ba2273fa-1c13-4d2c-a16c-58a7e8b54e14",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.ba2273fa-1c13-4d2c-a16c-58a7e8b54e14.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "7f409acc-1266-4085-a592-4940ba4f6540",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.7f409acc-1266-4085-a592-4940ba4f6540.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentTotalCustomers: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "feeb4584-e87f-4d9b-9e4c-a3531ce8f5b3",
        userArgs: {},
        cacheKey: `plasmic.$.feeb4584-e87f-4d9b-9e4c-a3531ce8f5b3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    _12MonthRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "89947f59-ab68-46a9-8fe7-a10412babf27",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.89947f59-ab68-46a9-8fe7-a10412babf27.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMUserGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "233a6fb8-a0b4-4c6d-902d-4da7a123d43c",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.233a6fb8-a0b4-4c6d-902d-4da7a123d43c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "64f4f3cf-0338-4693-b79b-1165f8493dc3",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.64f4f3cf-0338-4693-b79b-1165f8493dc3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMAvgOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "355b27f0-702e-4e7d-a253-188487f9186c",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.355b27f0-702e-4e7d-a253-188487f9186c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMRevenueGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "f55a3ea4-329f-4554-97a6-9bd2796ed173",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.f55a3ea4-329f-4554-97a6-9bd2796ed173.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentAvgOrder: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "7b42608e-c487-4a46-a244-53f6118fc6ad",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.7b42608e-c487-4a46-a244-53f6118fc6ad.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCountriesByRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "5821d7a7-a816-428e-a9e5-5a2471706147",
        userArgs: {},
        cacheKey: `plasmic.$.5821d7a7-a816-428e-a9e5-5a2471706147.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topProductsByQuantitySold: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "77ff1576-3828-4544-9e4f-0293c7108457",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.77ff1576-3828-4544-9e4f-0293c7108457.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalProductsSold: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "48803adb-d5a3-4874-aa16-9ab8a933c715",
        userArgs: {},
        cacheKey: `plasmic.$.48803adb-d5a3-4874-aa16-9ab8a933c715.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCategoriesByOrders: usePlasmicDataOp(() => {
      return {
        sourceId: "5HZUGViCrqTEWTEXDJfrkb",
        opId: "b5616761-8113-415f-8905-4feb8b4a160f",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.b5616761-8113-415f-8905-4feb8b4a160f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsthPnRPdlM3Or()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__a7H2X)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wlVx6)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Welcome back! "}
                      </h1>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__pZGnP)}
                  >
                    <DateTimeRangePicker
                      data-plasmic-name={"dateTimeRangePicker"}
                      data-plasmic-override={overrides.dateTimeRangePicker}
                      className={classNames(
                        "__wab_instance",
                        sty.dateTimeRangePicker
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: true,
                          className: classNames("__wab_instance", sty.start),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["start", "value"],
                            AntdDatePicker_Helpers
                          ),
                          picker: "date",
                          popupScopeClassName: sty["start__datePickerPopup"],
                          showTime: false,
                          value: generateStateValueProp($state, [
                            "start",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "start.value"
                            }
                          ],
                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdDatePicker
                            data-plasmic-name={"start"}
                            data-plasmic-override={overrides.start}
                            {...child$Props}
                          />
                        );
                      })()}
                    </DateTimeRangePicker>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__un5B9)}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__rtAzo
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mcTm2
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__vE41Z
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries
                                          .totalUsersByMonthCustomRange.data[0]
                                          .cumulative_users;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7W4LV
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const usersIncreasePercentage =
                                    $queries.moMUserGrowth.data[0]
                                      .user_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      usersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const userIncreasePercentage =
                                      $queries.moMUserGrowth.data[0]
                                        .user_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      userIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        timeRange={"from last month"}
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___82EH0
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__igZln
                              )}
                            >
                              {"Total users"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___6FOre)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: image7BVkWVsp8X5M,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__nl9S
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sM77G
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__br2Yq
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.totalOrdersByDateRange
                                          .data[0].order_count;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__idk4O
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const ordersIncreasePercentage =
                                    $queries.moMOrderGrowth.data[0]
                                      .order_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      ordersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const ordersIncreasePercentage =
                                      $queries.moMOrderGrowth.data[0]
                                        .order_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      ordersIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bW47X
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__do1Ph
                              )}
                            >
                              {"New orders"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jguAn)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: orderIconR29DQx4BCnui,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__btWKk
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uubqd
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__hbrln
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentAvgOrder.data[0]
                                              .avg_order_total
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ytjXl
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const avg_order_value_increase_percentage =
                                    $queries.moMAvgOrderGrowth.data[0]
                                      .avg_order_value_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const avg_order_value_increase_percentage =
                                      $queries.moMAvgOrderGrowth.data[0]
                                        .avg_order_value_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xLruj
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__xpWoq
                              )}
                            >
                              {"Avg. order value"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__isp5W)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: dollarIconM7GiU92Zwvqu,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__draKn
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ewidc
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__n0Ocm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentRevenue.data[0]
                                              .total_revenue_this_month
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9Tpea
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const revenueIncreasePercentage =
                                    $queries.moMRevenueGrowth.data[0]
                                      .revenue_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      revenueIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const revenueIncreasePercentage =
                                      $queries.moMRevenueGrowth.data[0]
                                        .revenue_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      revenueIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o4Ycq
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__noZEv
                              )}
                            >
                              {"Total revenue"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__blYc2)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: cartIconKAzmWj4Icoq6,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__i0G16)}
                  >
                    <Chart
                      data-plasmic-name={"chart"}
                      data-plasmic-override={overrides.chart}
                      className={classNames("__wab_instance", sty.chart)}
                      get12MoRevenue={$queries._12MonthRevenue}
                    />
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section___1PcO)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eajMw)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__d4Rmd
                        )}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__pc9De
                            )}
                          >
                            {"Top products sold"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cT7Kt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ql4LX
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i09Tv
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topProductsByQuantitySold.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cjSes
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__o5ZL2
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.product_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__p04Jr
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.total_quantity_sold;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__wCSax
                        )}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__nl4De
                            )}
                          >
                            {"Top product categories"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u7Gje
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gZY
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__edriW
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topCategoriesByOrders.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__c0Wpa
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qOl8C
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.category_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__banLw
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.num_orders_in_category;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                    </Stack__>
                  </section>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  pageLayout: ["pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  h1: ["h1"],
  dateTimeRangePicker: ["dateTimeRangePicker", "start"],
  start: ["start"],
  chart: ["chart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  dateTimeRangePicker: typeof DateTimeRangePicker;
  start: typeof AntdDatePicker;
  chart: typeof Chart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMonthOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMonthOverview__VariantsArgs;
    args?: PlasmicMonthOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMonthOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMonthOverview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMonthOverview__ArgProps,
          internalVariantPropNames: PlasmicMonthOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMonthOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMonthOverview";
  } else {
    func.displayName = `PlasmicMonthOverview.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "rPFPMaHQG1SUnR9RJDKCAh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMonthOverview = Object.assign(
  // Top-level PlasmicMonthOverview renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dateTimeRangePicker: makeNodeComponent("dateTimeRangePicker"),
    start: makeNodeComponent("start"),
    chart: makeNodeComponent("chart"),

    // Metadata about props expected for PlasmicMonthOverview
    internalVariantProps: PlasmicMonthOverview__VariantProps,
    internalArgProps: PlasmicMonthOverview__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMonthOverview;
/* prettier-ignore-end */
